{"version":3,"sources":["../src/script.js"],"names":["factory","define","amd","exports","module","window","Validation","options","formClass","$form","document","getElementsByClassName","formFieldClass","$formFields","errorWrapperClass","errorShowClass","buttonClass","$button","buttonDisabledClass","rulesList","Map","checkEvents","errorMessage","functionCheck","validateInputEmpty","validateMinCountSymbols","fieldsArray","createFieldsArray","fieldListeners","buttonListeners","handleAllListeners","createErrorWrappers","validationForm","$formField","elem","dataset","rules","rule","split","$elem","querySelector","fieldObject","$field","push","showError","errors","field","error","validateField","length","classList","add","remove","get","validateResult","validate","sort","a","b","priority","$error","textContent","message","template","insertAdjacentHTML","$errorWrapper","index","eventChecks","addFieldEvent","bind","eventCheck","addEventListener","removeEventListener","addButtonEvent","event","contains","preventDefault","val","value","minCount","parseInt","minCountSymbol","removeErrorWrappers","init"],"mappings":"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","sourcesContent":["(function (factory) {\r\n    if (typeof define === \"function\" && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define([], factory);\r\n    } else if (typeof exports === \"object\") {\r\n        // Node/CommonJS\r\n        module.exports = factory();\r\n    } else {\r\n        // Browser globals\r\n        window.Validation = factory();\r\n    }\r\n})(function () {\r\n\r\n    class Validation {\r\n\r\n        /* Example options\r\n        {\r\n            formClass:'form-check',     // String\r\n            $form:document.getElementsByClassName(this.formClass)[0],       // node element\r\n            formFieldClass:'form-check__field',     // String\r\n            $formFields:document.getElementsByClassName('form-check__field'),       // html collection\r\n            errorWrapperClass:'form-check__error',     // String\r\n            errorShowClass:'form-check__error--show',     // String\r\n            buttonClass:'form-check__button',     // String\r\n            $button:document.getElementsByClassName(this.formClass)[0],       // node element\r\n            buttonDisabledClass:'form-check__button--disabled',     // String\r\n        }\r\n         */\r\n\r\n        constructor(options) {\r\n            this.formClass = options && options.formClass ? options.formClass : 'form-check';\r\n            this.$form = options && options.$form ? options.$form : document.getElementsByClassName(this.formClass)[0];\r\n\r\n            this.formFieldClass = options && options.formClass ? options.formClass : 'form-check__field';\r\n            this.$formFields = options && options.$formFields ? options.$formFields : this.$form.getElementsByClassName(this.formFieldClass);\r\n            this.errorWrapperClass = options && options.errorWrapperClass ? options.errorWrapperClass : 'form-check__error';\r\n            this.errorShowClass = options && options.errorShowClass ? options.errorShowClass : 'form-check__error--show';\r\n            this.buttonClass = options && options.buttonClass ? options.buttonClass : 'form-check__button';\r\n            this.$button = options && options.$button ? options.$button : this.$form.getElementsByClassName(this.buttonClass)[0];\r\n            this.buttonDisabledClass = options && options.buttonDisabledClass ? options.buttonDisabledClass : 'form-check__button--disabled';\r\n\r\n            this.rulesList = new Map([\r\n                ['input-empty', {\r\n                    checkEvents: ['change'],\r\n                    errorMessage: 'Обязательное поле',\r\n                    functionCheck: this.validateInputEmpty,\r\n                }],\r\n                ['min-count-symbol', {\r\n                    checkEvents: ['change'],\r\n                    errorMessage: 'Минимум символов: ',\r\n                    functionCheck: this.validateMinCountSymbols,\r\n                }],\r\n            ]);\r\n        }\r\n\r\n        init() {\r\n            this.fieldsArray = null;\r\n            this.fieldsArray = this.createFieldsArray();\r\n            this.fieldListeners = [];\r\n            this.buttonListeners = [];\r\n            this.handleAllListeners(true);\r\n            this.createErrorWrappers();\r\n            this.validationForm(false);\r\n        }\r\n\r\n        // Создание объекта с полями\r\n        createFieldsArray() {\r\n            let fieldsArray = [];\r\n\r\n            for (let $formField of this.$formFields) {\r\n\r\n                // Собираем дата атрибуты для определения типа проверки и элемента\r\n                let elem = $formField.dataset.elem;\r\n                let rules = $formField.dataset.rule.split(', ');\r\n\r\n                // Определяем элемент, который будем проверять\r\n                let $elem;\r\n\r\n                if (elem !== 'self-dispatch') {\r\n                    $elem = $formField.querySelector(elem);\r\n                } else {\r\n                    $elem = $formField;\r\n                }\r\n\r\n                let fieldObject = {\r\n                    elem: elem,\r\n                    rules: rules,\r\n                    $elem: $elem,\r\n                    $field: $formField,\r\n                };\r\n\r\n                fieldsArray.push(fieldObject);\r\n            }\r\n\r\n            return fieldsArray;\r\n        }\r\n\r\n        // Валидация всей формы\r\n        validationForm(showError) {\r\n            let errors = [];\r\n\r\n            for (let field of this.fieldsArray) {\r\n                let error = this.validateField(field, showError);\r\n\r\n                if (error !== false) {\r\n                    errors.push(error);\r\n                }\r\n            }\r\n\r\n            if (errors.length > 0) {\r\n                this.$button.classList.add(this.buttonDisabledClass);\r\n            } else {\r\n                this.$button.classList.remove(this.buttonDisabledClass);\r\n            }\r\n        }\r\n\r\n        // Валидация одного поля\r\n        validateField(field, showError) {\r\n            let errors = [];\r\n\r\n            // Выполняем последовательно проверки\r\n            for (let rule of field.rules) {\r\n                let errorMessage = this.rulesList.get(rule).errorMessage;\r\n\r\n                let validateResult = this.rulesList.get(rule).functionCheck(field.$field, field.$elem, errorMessage);\r\n\r\n                if (!validateResult.validate) {\r\n                    errors.push(validateResult);\r\n                }\r\n            }\r\n\r\n            // Определяем наиболее приоритетную ошибку и оставляем в массиве только ее\r\n            if (errors.length > 0) {\r\n                errors.sort((a, b) => {\r\n                    return a.priority < b.priority ? 1 : -1;\r\n                });\r\n\r\n                errors = errors[0];\r\n            } else {\r\n                field.$field.classList.remove(this.errorShowClass);\r\n                return false;\r\n            }\r\n\r\n            field.$error.textContent = errors.message;\r\n\r\n            if (showError) {\r\n                field.$field.classList.add(this.errorShowClass);\r\n            }\r\n\r\n            return errors;\r\n        }\r\n\r\n        // Создание полей с ошибками\r\n        createErrorWrappers() {\r\n            for (let field of this.fieldsArray) {\r\n                let template = `<div class=\"${this.errorWrapperClass}\"></div>`;\r\n\r\n                if (field.$field.getElementsByClassName(this.errorWrapperClass).length > 0) {\r\n                    field.$field.insertAdjacentHTML('beforeEnd', template);\r\n                }\r\n\r\n                field.$field.insertAdjacentHTML('beforeEnd', template);\r\n                field.$error = field.$field.getElementsByClassName(this.errorWrapperClass)[0];\r\n            }\r\n        }\r\n\r\n        // Удаление полей с ошибками\r\n        removeErrorWrappers() {\r\n            for (let field of this.fieldsArray) {\r\n                field.$field.classList.remove(this.errorShowClass);\r\n                let $errorWrapper = field.$field.getElementsByClassName(this.errorWrapperClass)[0];\r\n                $errorWrapper.remove();\r\n            }\r\n        }\r\n\r\n\r\n        // Создание событий\r\n        handleAllListeners(add) {\r\n            let index = 0;\r\n\r\n            for (let field of this.fieldsArray) {\r\n                for (let rule of field.rules) {\r\n                    let eventChecks = this.rulesList.get(rule).checkEvents;\r\n                    this.fieldListeners.push(this.addFieldEvent.bind(this, field));\r\n\r\n                    for (let eventCheck of eventChecks) {\r\n                        if (add) {\r\n                            field.$elem.addEventListener(eventCheck, this.fieldListeners[index]);\r\n                        } else {\r\n                            field.$elem.removeEventListener(eventCheck, this.fieldListeners[index]);\r\n                        }\r\n\r\n                        index++;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.buttonListeners.push(this.addButtonEvent.bind(this));\r\n\r\n            if (add) {\r\n                this.$button.addEventListener('click', this.buttonListeners[0]);\r\n            } else {\r\n                this.$button.removeEventListener('click', this.buttonListeners[0]);\r\n            }\r\n        }\r\n\r\n        addFieldEvent(field) {\r\n            this.validateField(field, true);\r\n            this.validationForm(false);\r\n        }\r\n\r\n        addButtonEvent(event) {\r\n            this.validationForm(true);\r\n\r\n            if (this.$button.classList.contains(this.buttonDisabledClass)) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n\r\n        // Проверка пустого поля\r\n        validateInputEmpty($field, $elem, errorMessage) {\r\n            let val = $elem.value;\r\n            let validate = val !== '';\r\n            let priority = 100;\r\n\r\n            return {\r\n                validate: validate,\r\n                message: errorMessage,\r\n                priority: priority\r\n            };\r\n        }\r\n\r\n        // Проверка минимального количества символов\r\n        validateMinCountSymbols($field, $elem, errorMessage) {\r\n            let val = $elem.value;\r\n            let minCount = parseInt($field.dataset.minCountSymbol);\r\n            let validate = val.length >= minCount;\r\n            let message = errorMessage + minCount;\r\n            let priority = 200;\r\n\r\n            return {\r\n                validate: validate,\r\n                message: message,\r\n                priority: priority\r\n            };\r\n        }\r\n\r\n        // Удаление событий\r\n        removeAllListeners() {\r\n            for (let field of this.fieldsArray) {\r\n                for (let rule of field.rules) {\r\n                    let eventChecks = this.rulesList.get(rule).checkEvents;\r\n\r\n                    for (let eventCheck of eventChecks) {\r\n                        field.$elem.addEventListener(eventCheck, () => {\r\n                            this.validateField.bind(this, field, true)();\r\n                            this.validationForm.bind(this, false)();\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.$button.addEventListener('click', (event) => {\r\n                this.validationForm(true);\r\n\r\n                if (this.$button.classList.contains(this.buttonDisabledClass)) {\r\n                    event.preventDefault();\r\n                }\r\n            });\r\n        }\r\n\r\n        // Метод обновления формы\r\n        refresh() {\r\n            this.handleAllListeners(false);\r\n            this.removeErrorWrappers();\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    return Validation;\r\n});\r\n"],"file":"script.js"}