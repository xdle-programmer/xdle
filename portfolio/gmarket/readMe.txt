тут буду описывать новые функции связки которые могут пригодиться, а так же
просто полезную инфу.

1) rangeCallback функция калбэк для рэндж фильтра (необязательна)
	- при изменении значения, после того как рэндж приходит в состояние
	покоя вызвается функция rangeCallback() если она существует;
	в моих библиотеках она никак не описанна ты можешь задать ее сам
	и заключить в нее например аякс если будет необходимость
	пример: 
	function rangeCallback(){
		$.ajax({
			...
		});
	}
	приемущество ее в том что она вызывавется только на законченое действие
	и в случае чего не будет спама запросами.

2) Работа с попап окнами

	привязка вызова попап окна к DOM элементу

		<div data-popup="target-popup-name"></div>
		target-popup-name - класс нэйм попап окна которое нужно вызвать

		пример <div class="test" data-popup="popup_cancel"></div> - вызов попапа отмены
		заказа в ЛК.

	привязка информационного попап окна к DOM элементу

		<div class="test" data-popup-info="текст сообщения в окне"></div>

	вызов попап окна функцией 

		popuper.open('target-popup-name');

	вызов информационного окна функцией 

		popuper.info('текст сообщения в окне');

		*можно вызывать окна одно за другим, при этом не обязательно закрывать предыдущее

	закрыть все попап окна на странице
		popuper.close()

3) Формы и Валидация
	
	Тип валидации полей обозначается дата атрибутом data-validation
	этот атрибут по умолчанию делает поля обязательными для заполнения при вызове
	функции валидации формы

	Есть несколько типов валидации 
		Текст - data-validation="text"
		Пароль - data-validation="password"
		Телефон - data-validation="phone"
		Емаил - data-validation="email"
		Логин(динамическое поле которое может быть и телефоном и емаилом) - data-validation="login"
		Чекбоксы и радиокнопки - data-validation="check"

	валидация элемента(формы или инпута) вызывается функцией validation.isValid("selector", scrollToError);
	 где "selector" - селектор инпута или формы
	 scrollToError - boolean значение стоит ли скролить до места ошибки, по умолчнию 
	 является - true

	функция возвращает true или false проверяя форму или поле с заданым типом валидации

	пример валидации формы в условном операторе:
	
		if(validation.isValid("#myForm")){
			//
		}

	форма или элемент которые помнят значение текстовых полей ввода внутри себя
	должны обозначатся классом js-memory-form - значения введенные в текстовые поля
	таких форм будут сохранены в sessionStorage и после перезагрузки страницы поля автозаполнятся
	последними сохраненными данными.

4) функции через hash Url
	
	функции вызываемые через hash url имеют формат:

		/#[funcName]&=[funcValue]

	Например для работы с переключением вкладок формы на странице регистрации функция будет иметь следующий вид

	 /#formSwitch&=1 - где: 

	 	#formSwitch - название функции
	 	&= - разделитель
	 	1 - индекс вкладки на которую нужно перейти

5) аккордеоны и контроль через Url
	
	для того чтобы поделится ссылкой на аккордеон используется hash функция (п.4)
	формата #acordeon&=acc2 где:

		#acordeon - название функции 
		&= - разделитель
		acc2 - id нужного аккордеона 

	Все аккордеоны определенного типа по умолчанию связаны между собой
	это значит что открытие одного приведет к закрытию другого. Это свойтсво можно изменить с помощью дата атрибута data-connected="false", этот атрибут изменит поведение аккордеонов таким образом, что можно будет открыть несколько штук одинаковых аккордеонов не закрывая при этом соседние.

	для управления аккордеонами есть методы 'open', 'close', 'destroy'

	которые можно вызвать из функции .acordeon пример:

	 $('#acc2').acordeon('open') - открытие аккордеона с id '#acc2'
	 $('.acordeon').acordeon('close') - закрытие всех аккордеонов с классом .acordeon на странице
	 $('.acordeon').acordeon('destroy')  - уничтожение поведения всех аккордеонов на странице 